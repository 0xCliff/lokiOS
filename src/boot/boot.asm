ORG 0X7C00
BITS 16

CODE_SEG EQU GDT_CODE - GDT_START
DATA_SEG EQU GDT_DATA - GDT_START

_START:
	JMP SHORT START
	NOP

TIMES 33 DB 0	; BIOS PARAMETER BLOCK

START:
	JMP 0:STEP2
	
STEP2:	
	CLI		; CLEAR INTERUPTS
	MOV AX, 0X000
	MOV DS, AX
	MOV ES, AX
	MOV SS, AX
	MOV SP, 0X7C00
	STI		; ENABLES INTERUPTS

.LOAD_PROTECTED:
	CLI
	LGDT[GDT_DESCRIPTOR]
	MOV EAX, CR0
	OR EAX, 0X1
	MOV CR0, EAX
	JMP CODE_SEG:LOAD32

; GDT
GDT_START:

GDT_NULL:
	DD 0X0
	DD 0X0

; OFFSET 0X8
GDT_CODE:		; CS SHOULD POINT TO THIS
	DW 0XFFFF 	; SEGMENT LIMIT FIRST 0-15 BITS
	DW 0		; BASE FIRST 0-15 BITS
	DB 0		; BASE 16-23 BITS
	DB 0X09A	;
	DB 11001111B ; HIGH 4 BIT FLAGS AND THE LOW 4 BIT FLAGS
	DB 0		; BASE 24-31 BITS

; OFFSET 0X10
GDT_DATA:		; DS, SS, ES, FS, GS
	DW 0XFFFF	; SEGMENT LIMIT FIRST 0-15 BITS
	DW 0		; BASE FIRST 0-15 BITS
	DB 0		; BASE 16-23 BITS
	DB 0X092	;
	DB 11001111B ; HIGH 4 BIT FLAGS AND THE LOW 4 BIT FLAGS
	DB 0		; BASE 24-31 BITS

GDT_END:

GDT_DESCRIPTOR:
	DW GDT_END - GDT_START - 1
	DD GDT_START

[BITS 32]
LOAD32:
	MOV EAX, 1
	MOV ECX, 100
	MOV EDI, 0X0100000
	CALL ATA_LBA_READ
	JMP CODE_SEG:0X0100000

ATA_LBA_READ:
	MOV EBX, EAX 	; BACKUP THE LBA
	; SEND THE HIGHEST 8 BITS OF THE LBA TO THE HARD DISK CONTROLLER
	SHR EAX, 24
	OR EAX, 0XE0 ; SELECT THE MASTER DRIVE
	MOV DX, 0X1F6
	OUT DX, AL
	; FINISH SENDING THE HIGHEST 8 BITS OF THE LBA

	; SEND THE TOTAL SECTORS TO READ
	MOV EAX, ECX
	MOV DX, 0X1F2
	OUT DX, AL
	; FINISHED SENDING THE TOTAL SECTORS TO READ

	; SEND MORE BITS OF THE LBA
	MOV EAX, EBX 	; RESTORE THE BACKUP LBA
	MOV DX, 0X1F3
	OUT DX, AL
	; FINISHED SENDING MORE BITS OF THE LBA

	; SEND MORE BITS OF THE LBA
	MOV DX, 0X1F4
	MOV EAX, EBX 	; RESTORE THE BACKUP LBA
	SHR EAX, 8
	OUT DX, AL
	; FINISHED SENDING MORE BITS OF THE LBA

	; SEND UPPER 16 BITS OF THE LBA
	MOV DX, 0X1F5
	MOV EAX, EBX 	; RESTORE THE BACKUP LBA
	SHR EAX, 16
	OUT DX, AL
	; FINISHED SENDING THE UPPER 16 BITS OF THE LBA

	MOV DX, 0X1F7
	MOV AL, 0X20
	OUT DX, AL

	; READ ALL SECTOR INTO MEMORY
.NEXT_SECTOR:
	PUSH ECX

; CHECKING IF WE NEED TO READ
.TRY_AGAIN:
	MOV DX, 0X1F7
	IN AL, DX
	TEST AL, 8
	JZ .TRY_AGAIN

; WE NEED TO READ 256 WORDS AT A TIME
	MOV ECX, 256
	MOV DX, 0X1F0
	REP INSW
	POP ECX
	LOOP .NEXT_SECTOR
	; END OF READING SECTORS INTO MEMORY
	RET

TIMES 510-($ - $$) DB 0
DW 0XAA55


	
